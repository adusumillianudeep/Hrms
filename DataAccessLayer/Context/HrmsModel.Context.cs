//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccessLayer.Context
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class HrmsEntities : DbContext
    {
        public HrmsEntities()
            : base("name=HrmsEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ContactDetail> ContactDetails { get; set; }
        public virtual DbSet<CostCenter> CostCenters { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Currency> Currencies { get; set; }
        public virtual DbSet<CustomField> CustomFields { get; set; }
        public virtual DbSet<CustomFieldSection> CustomFieldSections { get; set; }
        public virtual DbSet<DataGroupPermission> DataGroupPermissions { get; set; }
        public virtual DbSet<Dependent> Dependents { get; set; }
        public virtual DbSet<DependentsMarriagesInfo> DependentsMarriagesInfoes { get; set; }
        public virtual DbSet<DirectDeposit> DirectDeposits { get; set; }
        public virtual DbSet<EmergencyContact> EmergencyContacts { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<EmployeeAction> EmployeeActions { get; set; }
        public virtual DbSet<EmployeeJob> EmployeeJobs { get; set; }
        public virtual DbSet<EmployeeLanguage> EmployeeLanguages { get; set; }
        public virtual DbSet<EmployeeMembership> EmployeeMemberships { get; set; }
        public virtual DbSet<EmployeeSkill> EmployeeSkills { get; set; }
        public virtual DbSet<EmploymentStatu> EmploymentStatus { get; set; }
        public virtual DbSet<GradeCurrency> GradeCurrencies { get; set; }
        public virtual DbSet<Immigration> Immigrations { get; set; }
        public virtual DbSet<Job> Jobs { get; set; }
        public virtual DbSet<JobCategory> JobCategories { get; set; }
        public virtual DbSet<Language> Languages { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<Membership> Memberships { get; set; }
        public virtual DbSet<Nationality> Nationalities { get; set; }
        public virtual DbSet<Organization> Organizations { get; set; }
        public virtual DbSet<OrganizationLocation> OrganizationLocations { get; set; }
        public virtual DbSet<OtherJobDetail> OtherJobDetails { get; set; }
        public virtual DbSet<PayGrade> PayGrades { get; set; }
        public virtual DbSet<PersonalDetails_Important> PersonalDetails_Important { get; set; }
        public virtual DbSet<PersonalDetails_Preferences> PersonalDetails_Preferences { get; set; }
        public virtual DbSet<Region> Regions { get; set; }
        public virtual DbSet<RoleDataGroupPermission> RoleDataGroupPermissions { get; set; }
        public virtual DbSet<RoleEmployeeAction> RoleEmployeeActions { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<RoleType> RoleTypes { get; set; }
        public virtual DbSet<RoleTypesDataGroupPermission> RoleTypesDataGroupPermissions { get; set; }
        public virtual DbSet<RoleTypeWorkflowManagement> RoleTypeWorkflowManagements { get; set; }
        public virtual DbSet<RoleWorkflowAction> RoleWorkflowActions { get; set; }
        public virtual DbSet<Salary> Salaries { get; set; }
        public virtual DbSet<SalaryComponent> SalaryComponents { get; set; }
        public virtual DbSet<Section> Sections { get; set; }
        public virtual DbSet<SectionField> SectionFields { get; set; }
        public virtual DbSet<Skill> Skills { get; set; }
        public virtual DbSet<SocialMediaDetail> SocialMediaDetails { get; set; }
        public virtual DbSet<Subordinate> Subordinates { get; set; }
        public virtual DbSet<Supervisor> Supervisors { get; set; }
        public virtual DbSet<TimeZone> TimeZones { get; set; }
        public virtual DbSet<UserRegion> UserRegions { get; set; }
        public virtual DbSet<UserRole> UserRoles { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<WorkExperience> WorkExperiences { get; set; }
        public virtual DbSet<WorkflowManagement> WorkflowManagements { get; set; }
        public virtual DbSet<WorkShift> WorkShifts { get; set; }
    
        [DbFunction("HrmsEntities", "splitstring")]
        public virtual IQueryable<splitstring_Result> splitstring(string stringToSplit)
        {
            var stringToSplitParameter = stringToSplit != null ?
                new ObjectParameter("stringToSplit", stringToSplit) :
                new ObjectParameter("stringToSplit", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<splitstring_Result>("[HrmsEntities].[splitstring](@stringToSplit)", stringToSplitParameter);
        }
    
        public virtual int DeleteCostCenter(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCostCenter", idParameter);
        }
    
        public virtual int DeleteCostCenters()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCostCenters");
        }
    
        public virtual int Generateclassfromtable(string tableName)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Generateclassfromtable", tableNameParameter);
        }
    
        public virtual ObjectResult<GetCostCenterById_Result> GetCostCenterById(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCostCenterById_Result>("GetCostCenterById", idParameter);
        }
    
        public virtual ObjectResult<GetCostCenters_Result> GetCostCenters()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCostCenters_Result>("GetCostCenters");
        }
    
        public virtual ObjectResult<GetGeneralInfo_Result> GetGeneralInfo(Nullable<long> organizationId)
        {
            var organizationIdParameter = organizationId.HasValue ?
                new ObjectParameter("OrganizationId", organizationId) :
                new ObjectParameter("OrganizationId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetGeneralInfo_Result>("GetGeneralInfo", organizationIdParameter);
        }
    
        public virtual ObjectResult<GetLocationInfo_Result> GetLocationInfo(Nullable<long> organizationId, Nullable<long> organizationLocationId)
        {
            var organizationIdParameter = organizationId.HasValue ?
                new ObjectParameter("OrganizationId", organizationId) :
                new ObjectParameter("OrganizationId", typeof(long));
    
            var organizationLocationIdParameter = organizationLocationId.HasValue ?
                new ObjectParameter("OrganizationLocationId", organizationLocationId) :
                new ObjectParameter("OrganizationLocationId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLocationInfo_Result>("GetLocationInfo", organizationIdParameter, organizationLocationIdParameter);
        }
    
        public virtual ObjectResult<GetPayGrades_Result> GetPayGrades()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPayGrades_Result>("GetPayGrades");
        }
    
        public virtual ObjectResult<GetRoleNamesAndTypes_Result> GetRoleNamesAndTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRoleNamesAndTypes_Result>("GetRoleNamesAndTypes");
        }
    
        public virtual ObjectResult<GetUserDetailBasedOnUserCredentials_Result> GetUserDetailBasedOnUserCredentials(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserDetailBasedOnUserCredentials_Result>("GetUserDetailBasedOnUserCredentials", userNameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<GetUserDetailsById_Result> GetUserDetailsById(Nullable<long> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserDetailsById_Result>("GetUserDetailsById", userIdParameter);
        }
    
        public virtual ObjectResult<GetUserRoleDetails_Result> GetUserRoleDetails(Nullable<int> roleId)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserRoleDetails_Result>("GetUserRoleDetails", roleIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> InsertRole(string roleName, Nullable<int> roleType)
        {
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var roleTypeParameter = roleType.HasValue ?
                new ObjectParameter("RoleType", roleType) :
                new ObjectParameter("RoleType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("InsertRole", roleNameParameter, roleTypeParameter);
        }
    
        public virtual int InsertRoleDataGroupPermissions(Nullable<int> roleId, string dataGroupPermissionIds)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var dataGroupPermissionIdsParameter = dataGroupPermissionIds != null ?
                new ObjectParameter("DataGroupPermissionIds", dataGroupPermissionIds) :
                new ObjectParameter("DataGroupPermissionIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertRoleDataGroupPermissions", roleIdParameter, dataGroupPermissionIdsParameter);
        }
    
        public virtual int InsertRoleEmployeeActions(Nullable<int> roleId, string employeeActions)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var employeeActionsParameter = employeeActions != null ?
                new ObjectParameter("EmployeeActions", employeeActions) :
                new ObjectParameter("EmployeeActions", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertRoleEmployeeActions", roleIdParameter, employeeActionsParameter);
        }
    
        public virtual int InsertRoleWorkflowManagements(Nullable<int> roleId, string workflowManagements)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var workflowManagementsParameter = workflowManagements != null ?
                new ObjectParameter("WorkflowManagements", workflowManagements) :
                new ObjectParameter("WorkflowManagements", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertRoleWorkflowManagements", roleIdParameter, workflowManagementsParameter);
        }
    
        public virtual int InsertUserDetails(string userName, string password, string firstName, string lastName, string phoneNo, string email, Nullable<long> organizationId, Nullable<int> roleId, Nullable<int> regionId)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("PhoneNo", phoneNo) :
                new ObjectParameter("PhoneNo", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var organizationIdParameter = organizationId.HasValue ?
                new ObjectParameter("OrganizationId", organizationId) :
                new ObjectParameter("OrganizationId", typeof(long));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var regionIdParameter = regionId.HasValue ?
                new ObjectParameter("RegionId", regionId) :
                new ObjectParameter("RegionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUserDetails", userNameParameter, passwordParameter, firstNameParameter, lastNameParameter, phoneNoParameter, emailParameter, organizationIdParameter, roleIdParameter, regionIdParameter);
        }
    
        public virtual int SaveCostCenter(ObjectParameter id, string name, string description)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveCostCenter", id, nameParameter, descriptionParameter);
        }
    
        public virtual int SaveGeneralInfo(Nullable<long> organizationId, string name, string taxId, string registrationNumber, string phone, string email, string address1, string address2, string city, string state, string zipCode, string country, string note, Nullable<int> noOfEmployees, Nullable<bool> isEEOEnabled, Nullable<bool> isCostCenterEnabled, string costCenter)
        {
            var organizationIdParameter = organizationId.HasValue ?
                new ObjectParameter("OrganizationId", organizationId) :
                new ObjectParameter("OrganizationId", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var taxIdParameter = taxId != null ?
                new ObjectParameter("TaxId", taxId) :
                new ObjectParameter("TaxId", typeof(string));
    
            var registrationNumberParameter = registrationNumber != null ?
                new ObjectParameter("RegistrationNumber", registrationNumber) :
                new ObjectParameter("RegistrationNumber", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var noOfEmployeesParameter = noOfEmployees.HasValue ?
                new ObjectParameter("NoOfEmployees", noOfEmployees) :
                new ObjectParameter("NoOfEmployees", typeof(int));
    
            var isEEOEnabledParameter = isEEOEnabled.HasValue ?
                new ObjectParameter("IsEEOEnabled", isEEOEnabled) :
                new ObjectParameter("IsEEOEnabled", typeof(bool));
    
            var isCostCenterEnabledParameter = isCostCenterEnabled.HasValue ?
                new ObjectParameter("IsCostCenterEnabled", isCostCenterEnabled) :
                new ObjectParameter("IsCostCenterEnabled", typeof(bool));
    
            var costCenterParameter = costCenter != null ?
                new ObjectParameter("CostCenter", costCenter) :
                new ObjectParameter("CostCenter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveGeneralInfo", organizationIdParameter, nameParameter, taxIdParameter, registrationNumberParameter, phoneParameter, emailParameter, address1Parameter, address2Parameter, cityParameter, stateParameter, zipCodeParameter, countryParameter, noteParameter, noOfEmployeesParameter, isEEOEnabledParameter, isCostCenterEnabledParameter, costCenterParameter);
        }
    
        public virtual int SaveLocationInfo(Nullable<long> organizationId, string name, string phone, string address, string city, string fax, string zipCode, string country, string comments)
        {
            var organizationIdParameter = organizationId.HasValue ?
                new ObjectParameter("OrganizationId", organizationId) :
                new ObjectParameter("OrganizationId", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveLocationInfo", organizationIdParameter, nameParameter, phoneParameter, addressParameter, cityParameter, faxParameter, zipCodeParameter, countryParameter, commentsParameter);
        }
    
        public virtual int UpdateCostCenter(Nullable<long> id, string name, string description)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCostCenter", idParameter, nameParameter, descriptionParameter);
        }
    
        public virtual int UpdateUserDetails(Nullable<long> userId, string userName, string firstName, string lastName, string phoneNo, string email, Nullable<long> organizationId, Nullable<int> roleId, Nullable<int> regionId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("PhoneNo", phoneNo) :
                new ObjectParameter("PhoneNo", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var organizationIdParameter = organizationId.HasValue ?
                new ObjectParameter("OrganizationId", organizationId) :
                new ObjectParameter("OrganizationId", typeof(long));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var regionIdParameter = regionId.HasValue ?
                new ObjectParameter("RegionId", regionId) :
                new ObjectParameter("RegionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUserDetails", userIdParameter, userNameParameter, firstNameParameter, lastNameParameter, phoneNoParameter, emailParameter, organizationIdParameter, roleIdParameter, regionIdParameter);
        }
    }
}
